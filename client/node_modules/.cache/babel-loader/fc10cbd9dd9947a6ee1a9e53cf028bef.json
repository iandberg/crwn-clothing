{"ast":null,"code":"var _jsxFileName = \"/Users/iandahlberg/Documents/code/react learn/crwn-clothing/client/src/pages/shop/shop.component.jsx\";\nimport React, { useEffect, lazy, Suspense } from \"react\";\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\nimport Spinner from '../../components/spinner/spinner.component'; // pages/components\n\nimport CollectionPageContainer from '../collection/collection.container';\nconst CollectionsOverviewContainer = lazy(() => '../../components/collections-overview/collections-overview.container'); // =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\nconst ShopPage = ({\n  fetchCollectionsStart,\n  match\n}) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]); //only fetch collections if on load or if fetchCollectionsStart changes (which it, of course, won't)\n\n  return React.createElement(\"div\", {\n    className: \"shop-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Suspense, {\n    fallback: React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"\".concat(match.path),\n    component: CollectionsOverviewContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })), React.createElement(Route, {\n    path: \"\".concat(match.path, \"/:collectionId\"),\n    component: CollectionPageContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/iandahlberg/Documents/code/react learn/crwn-clothing/client/src/pages/shop/shop.component.jsx"],"names":["React","useEffect","lazy","Suspense","Route","connect","fetchCollectionsStart","Spinner","CollectionPageContainer","CollectionsOverviewContainer","ShopPage","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AACA,OAAOC,OAAP,MAAoB,4CAApB,C,CAEA;;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AAEA,MAAMC,4BAA4B,GAAGP,IAAI,CAAC,MAAM,sEAAP,CAAzC,C,CAEA;;AAEA,MAAMQ,QAAQ,GAAG,CAAC;AAAEJ,EAAAA,qBAAF;AAAyBK,EAAAA;AAAzB,CAAD,KAAsC;AAEtDV,EAAAA,SAAS,CAAC,MAAI;AACbK,IAAAA,qBAAqB;AACrB,GAFQ,EAEN,CAAEA,qBAAF,CAFM,CAAT,CAFsD,CAIxB;;AAE9B,SACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,KAAD;AACC,IAAA,KAAK,MADN;AAEC,IAAA,IAAI,YAAKK,KAAK,CAACC,IAAX,CAFL;AAGC,IAAA,SAAS,EAAEH,4BAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,EASC,oBAAC,KAAD;AACC,IAAA,IAAI,YAAKE,KAAK,CAACC,IAAX,mBADL;AAEC,IAAA,SAAS,EAAEJ,uBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATD,CADD;AAkBA,CAxBD;;AA0BA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACvCR,EAAAA,qBAAqB,EAAE,MAAMQ,QAAQ,CAACR,qBAAqB,EAAtB;AADE,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CACrB,IADqB,EAErBQ,kBAFqB,CAAP,CAGbH,QAHa,CAAf","sourcesContent":["import React, { useEffect, lazy, Suspense } from \"react\"\nimport { Route } from 'react-router-dom'\n\nimport { connect } from 'react-redux'\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions'\nimport Spinner from '../../components/spinner/spinner.component'\n\n// pages/components\nimport CollectionPageContainer from '../collection/collection.container'\n\nconst CollectionsOverviewContainer = lazy(()=>( '../../components/collections-overview/collections-overview.container' ))\n\n// =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\n\n\tuseEffect(()=>{\n\t\tfetchCollectionsStart()\n\t}, [ fetchCollectionsStart ]) //only fetch collections if on load or if fetchCollectionsStart changes (which it, of course, won't)\n\n\treturn(\n\t\t<div className=\"shop-page\">\n\t\t\t<Suspense fallback={<Spinner />}>\n\t\t\t\t<Route \n\t\t\t\t\texact \n\t\t\t\t\tpath={`${match.path}`} \n\t\t\t\t\tcomponent={CollectionsOverviewContainer} \n\t\t\t\t/>\n\t\t\t</Suspense>\n\n\t\t\t<Route \n\t\t\t\tpath={`${match.path}/:collectionId`} \n\t\t\t\tcomponent={CollectionPageContainer} \n\t\t\t/>\n\n\t\t</div>\n\t)\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tfetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n})\n\nexport default connect(\n\tnull, \n\tmapDispatchToProps\n)(ShopPage)\n"]},"metadata":{},"sourceType":"module"}
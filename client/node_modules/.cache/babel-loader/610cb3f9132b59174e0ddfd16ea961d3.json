{"ast":null,"code":"import _defineProperty from \"/Users/iandahlberg/Documents/code/react learn/crwn-clothing/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data()))); // 'put' fires/dispatches action to be handled by reducer\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START);\n} // we 'bundle' our sagas into one export, to run concurrently\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/iandahlberg/Documents/code/react learn/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","signInWithPopup","user","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,SAASC,IAAT,EACCC,cADD,EAECC,yBAFD,EAGCC,cAHD,QAIO,+BAJP;AAMA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AACjD,MAAG;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACM,yBAAD,EAA4BG,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACI,aAAa;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE;AAAnB,OAA0BF,YAAY,CAACG,IAAb,EAA1B,EAAd,CAAT,CAHE,CAIF;AACA,GALD,CAKC,OAAMC,KAAN,EAAY;AACZ,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACA;AAED;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAClC,MAAG;AAAA,iBACa,MAAMZ,IAAI,CAACa,eAAL,CAAqBZ,cAArB,CADnB;AAAA,UACKa,IADL,QACKA,IADL;;AAEF,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AACA,GAHD,CAGC,OAAMH,KAAN,EAAY;AACZ,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACA;AACD;AAED,OAAO,UAAUI,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAuD;AAE7D,MAAG;AAAA,kBACa,MAAMlB,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CADnB;AAAA,UACKJ,IADL,SACKA,IADL;;AAEF,UAAMV,uBAAuB,CAACU,IAAD,CAA7B;AACA,GAHD,CAGC,OAAOH,KAAP,EAAa;AACb,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACA;AACD;AAED,OAAO,UAAUS,mBAAV,GAA+B;AACrC,MAAI;AACH,UAAMf,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAG,CAACE,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACA,GAJD,CAIC,OAAMM,KAAN,EAAY;AACZ,UAAMjB,GAAG,CAACK,aAAa,CAACY,KAAD,CAAd,CAAT;AACA;AACD,C,CAED;;AAEA,OAAO,UAAUU,mBAAV,GAA+B;AACrC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACA;AAED,OAAO,UAAUW,kBAAV,GAA8B;AACpC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACA;AAED,OAAO,UAAUU,kBAAV,GAA8B;AACpC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCN,mBAArC,CAAhB;AACA;AAED,OAAO,UAAUO,cAAV,GAA0B;AAChC,QAAMlC,UAAU,CAACI,eAAe,CAAC+B,cAAjB,CAAhB;AACA,C,CAED;;AACA,OAAO,UAAUC,SAAV,GAAqB;AAC3B,QAAMlC,GAAG,CAAC,CACTC,IAAI,CAACyB,mBAAD,CADK,EAETzB,IAAI,CAAC2B,kBAAD,CAFK,EAGT3B,IAAI,CAAC6B,kBAAD,CAHK,CAAD,CAAT;AAKA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user.types'\n\nimport { signInSuccess, signInFailure } from './user.actions'\n\nimport { auth, \n\tgoogleProvider, \n\tcreateUserProfileDocument,\n\tgetCurrentUser,\n} from '../../firebase/firebase.utils'\n\nexport function* getSnapshotFromUserAuth(userAuth){\n\ttry{\n\t\tconst userRef = yield call(createUserProfileDocument, userAuth)\n\t\tconst userSnapshot = yield userRef.get()\n\t\tyield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n\t\t// 'put' fires/dispatches action to be handled by reducer\n\t}catch(error){\n\t\tyield put(signInFailure(error))\n\t}\n\n}\n\nexport function* signInWithGoogle(){\n\ttry{\n\t\tconst {user} = yield auth.signInWithPopup(googleProvider)\n\t\tyield getSnapshotFromUserAuth(user)\n\t}catch(error){\n\t\tyield put(signInFailure(error))\n\t}\n}\n\nexport function* signInWithEmail({payload: {email, password}}){\n\n\ttry{\n\t\tconst {user} = yield auth.signInWithEmailAndPassword(email, password)\n\t\tyield getSnapshotFromUserAuth(user)\n\t}catch (error){\n\t\tyield put(signInFailure(error))\n\t}\n}\n\nexport function* isUserAuthenticated(){\n\ttry {\n\t\tconst userAuth = yield getCurrentUser();\n\t\tif(!userAuth) return;\n\t\tyield getSnapshotFromUserAuth(userAuth)\n\t}catch(error){\n\t\tyield put(signInFailure(error));\n\t}\n}\n\n// =+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+\n\nexport function* onGoogleSignInStart(){\n\tyield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart(){\n\tyield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession(){\n\tyield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onSignOutStart(){\n\tyield takeLatest(UserActionTypes.SIGN_OUT_START)\n}\n\n// we 'bundle' our sagas into one export, to run concurrently\nexport function* userSagas(){\n\tyield all([\n\t\tcall(onGoogleSignInStart),\n\t\tcall(onEmailSignInStart),\n\t\tcall(onCheckUserSession),\n\t])\n}\n"]},"metadata":{},"sourceType":"module"}
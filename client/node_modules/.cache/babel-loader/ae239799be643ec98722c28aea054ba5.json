{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // previous promise-based approach\n  // collectionRef\n  // \t.get()\n  // \t.then(snapshot =>{\n  // \t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n  // \t\tdispatch(fetchCollectionsSuccess(collectionsMap))\n  // \t})\n  // \t.catch(error => dispatch(fetchCollectionsFailure(error.message)))\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, //it listens for this action, then..-> \n  fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/iandahlberg/Documents/code/react learn/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SACCC,uBADD,EAECC,uBAFD,QAGO,gBAHP;AAMA,OAAO,UAAUC,qBAAV,GAAiC;AAEvC,MAAG;AACF,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAChCI,+BADgC,EAEhCM,QAFgC,CAAjC;AAIA,UAAMT,GAAG,CAACI,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AAEA,GATD,CASE,OAAOC,KAAP,EAAa;AACd,UAAMZ,GAAG,CAACK,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA,GAbsC,CAevC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACvC,QAAMhB,UAAU,CACfG,eAAe,CAACc,uBADD,EACyB;AACxCT,EAAAA,qBAFe,CAAhB;AAIA","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects'\nimport ShopActionTypes from './shop.types'\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\n\nimport {\n\tfetchCollectionsSuccess,\n\tfetchCollectionsFailure\n} from './shop.actions'\n\n\nexport function* fetchCollectionsAsync(){\n\n\ttry{\n\t\tconst collectionRef = firestore.collection('collections')\n\t\tconst snapshot = yield collectionRef.get()\n\t\tconst collectionsMap = yield call(\n\t\t\tconvertCollectionsSnapshotToMap, \n\t\t\tsnapshot\n\t\t)\n\t\tyield put(fetchCollectionsSuccess(collectionsMap))\n\n\t} catch (error){\n\t\tyield put(fetchCollectionsFailure(error.message))\n\t}\n\n\t// previous promise-based approach\n\t// collectionRef\n\t// \t.get()\n\t// \t.then(snapshot =>{\n\t// \t\tconst collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n\t// \t\tdispatch(fetchCollectionsSuccess(collectionsMap))\n\t// \t})\n\t// \t.catch(error => dispatch(fetchCollectionsFailure(error.message)))\n\n}\n\nexport function* fetchCollectionsStart(){\n\tyield takeLatest(\n\t\tShopActionTypes.FETCH_COLLECTIONS_START,//it listens for this action, then..-> \n\t\tfetchCollectionsAsync\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"/Users/iandahlberg/Documents/code/react learn/crwn-clothing/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  // see if item already exists in cartItems\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id); // return a new array\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => {\n      return cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItemToAdd, {\n        quantity: cartItem.quantity + 1\n      }) : cartItem;\n    });\n  } else {\n    // return just the cart item in new array, but add in the quantity attribute\n    return [...cartItems, _objectSpread({}, cartItemToAdd, {\n      quantity: 1\n    })];\n  }\n};","map":{"version":3,"sources":["/Users/iandahlberg/Documents/code/react learn/crwn-clothing/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity"],"mappings":";;;;;;AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AAC1D;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACxBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADlB,CAAzB,CAF0D,CAM1D;;AACA,MAAGH,gBAAH,EAAoB;AACnB,WAAOF,SAAS,CAACM,GAAV,CACNF,QAAQ,IAAI;AACX,aAAOA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBACDJ,aADC;AACcM,QAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAD5C,WACiDH,QADxD;AAEA,KAJK,CAAP;AAMA,GAPD,MAOK;AACJ;AACA,WAAO,CAAC,GAAGJ,SAAJ,oBAAmBC,aAAnB;AAAkCM,MAAAA,QAAQ,EAAE;AAA5C,OAAP;AACA;AACD,CAlBM","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) => {\n\t// see if item already exists in cartItems\n\tconst existingCartItem = cartItems.find(\n\t\tcartItem => cartItem.id === cartItemToAdd.id\n\t)\n\n\t// return a new array\n\tif(existingCartItem){\n\t\treturn cartItems.map(\n\t\t\tcartItem => {\n\t\t\t\treturn cartItem.id === cartItemToAdd.id ? \n\t\t\t\t\t{ ...cartItemToAdd, quantity: cartItem.quantity + 1} : cartItem\n\t\t\t}\n\t\t)\n\t}else{\n\t\t// return just the cart item in new array, but add in the quantity attribute\n\t\treturn [...cartItems, {...cartItemToAdd, quantity: 1}]\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"/Users/iandahlberg/Documents/code/react learn/crwn-clothing/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app'; //base import\n// attach to firebase keyword to:\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDtOxTq6FCTexodCrwH_poipj_JA5Vijiw\",\n  authDomain: \"crwn-db-37dd7.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-37dd7.firebaseio.com\",\n  projectId: \"crwn-db-37dd7\",\n  storageBucket: \"\",\n  messagingSenderId: \"925863128681\",\n  appId: \"1:925863128681:web:3accc3571cc9f72134bcf8\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get(); // includes 'exists' property\n\n  if (!snapShot.exists) {\n    //if user doesn't already exist, then create it\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef; // a documentRef\n}; // utility to batch import items to firestore - invoke somewhere once\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  }); // works when logged out\n\n  return await batch.commit();\n}; // gets snapshot object and converts to array of collections\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title: title,\n      items: items\n    };\n  });\n  console.log(transformedCollections);\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n}); //use popup when signing in with Google\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/iandahlberg/Documents/code/react learn/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app' //base import\n\n// attach to firebase keyword to:\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyDtOxTq6FCTexodCrwH_poipj_JA5Vijiw\",\n    authDomain: \"crwn-db-37dd7.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-37dd7.firebaseio.com\",\n    projectId: \"crwn-db-37dd7\",\n    storageBucket: \"\",\n    messagingSenderId: \"925863128681\",\n    appId: \"1:925863128681:web:3accc3571cc9f72134bcf8\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\n\tif(!userAuth) return;\n\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`)\n\tconst snapShot = await userRef.get(); // includes 'exists' property\n\n\tif(!snapShot.exists){ //if user doesn't already exist, then create it\n\t\tconst {displayName, email} = userAuth\n\t\tconst createdAt = new Date()\n\n\t\ttry{\n\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData\n\t\t\t})\n\n\t\t}catch(err){\n\t\t\tconsole.log('error creating user',err.message);\n\n\t\t}\n\n\t}\n\n\treturn userRef // a documentRef\n}\n\n// utility to batch import items to firestore - invoke somewhere once\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n\n\tconst collectionRef = firestore.collection(collectionKey)\n\t\n\tconst batch = firestore.batch()\n\n\tobjectsToAdd.forEach(obj => {\n\t\tconst newDocRef = collectionRef.doc()\n\t\tbatch.set(newDocRef, obj)\n\t})\n\n\t// works when logged out\n\treturn await batch.commit()\n}\n\n// gets snapshot object and converts to array of collections\nexport const convertCollectionsSnapshotToMap = (collections) => {\n\n\tconst transformedCollections = collections.docs.map(doc => {\n\t\tconst { title, items } = doc.data()\n\t\treturn {\n\t\t\trouteName: encodeURI(title.toLowerCase()),\n\t\t\tid: doc.id,\n\t\t\ttitle: title,\n\t\t\titems: items\n\t\t}\n\t})\n\n\tconsole.log(transformedCollections);\n}\n\n\nfirebase.initializeApp(config)\n\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nconst provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({prompt: 'select_account'}) //use popup when signing in with Google\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}
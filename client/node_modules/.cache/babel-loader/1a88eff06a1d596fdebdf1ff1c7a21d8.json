{"ast":null,"code":"var _jsxFileName = \"/Users/iandahlberg/Documents/code/react learn/crwn-clothing/src/components/sign-in/sign-in.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './sign-in.styles.scss';\nimport FormInput from '../form-input/form-input.component.jsx';\nimport CustomButton from '../custom-button/custom-button.component.jsx';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\n\nclass SignIn extends React.Component {\n  constructor() {\n    super();\n\n    this.onChangeHandle = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const emailSignInStart = this.props.emailSignInStart;\n      const _this$state = this.state,\n            email = _this$state.email,\n            password = _this$state.password;\n      emailSignInStart(email, password);\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const googleSignInStart = this.props.googleSignInStart;\n    return React.createElement(\"div\", {\n      className: \"sign-in\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      label: \"Email\",\n      name: \"email\",\n      type: \"email\",\n      value: this.state.email,\n      onChange: this.onChangeHandle,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      label: \"Password\",\n      name: \"password\",\n      type: \"password\",\n      value: this.state.password,\n      onChange: this.onChangeHandle,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" Submit \"), React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Sign in with Google\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/iandahlberg/Documents/code/react learn/crwn-clothing/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","SignIn","Component","constructor","onChangeHandle","e","target","name","value","setState","handleSubmit","preventDefault","props","state","email","password","render","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,uBAAP;AAEA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,YAAP,MAAyB,8CAAzB;AAEA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,+BAApD;;AAEA,MAAMC,MAAN,SAAqBN,KAAK,CAACO,SAA3B,CAAoC;AAEnCC,EAAAA,WAAW,GAAE;AACZ;;AADY,SASbC,cATa,GASKC,CAAD,IAAK;AAAA,wBACCA,CAAC,CAACC,MADH;AAAA,YACdC,IADc,aACdA,IADc;AAAA,YACRC,KADQ,aACRA,KADQ;AAGrB,WAAKC,QAAL,CAAc;AACb,SAACF,IAAD,GAASC;AADI,OAAd;AAGA,KAfY;;AAAA,SAiBbE,YAjBa,GAiBE,MAAOL,CAAP,IAAW;AACzBA,MAAAA,CAAC,CAACM,cAAF;AADyB,YAGlBX,gBAHkB,GAGE,KAAKY,KAHP,CAGlBZ,gBAHkB;AAAA,0BAIC,KAAKa,KAJN;AAAA,YAIlBC,KAJkB,eAIlBA,KAJkB;AAAA,YAIXC,QAJW,eAIXA,QAJW;AAMzBf,MAAAA,gBAAgB,CAACc,KAAD,EAAQC,QAAR,CAAhB;AACA,KAxBY;;AAGZ,SAAKF,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAE,EADK;AAEZC,MAAAA,QAAQ,EAAE;AAFE,KAAb;AAIA;;AAmBDC,EAAAA,MAAM,GAAE;AAAA,UAECjB,iBAFD,GAEuB,KAAKa,KAF5B,CAECb,iBAFD;AAIP,WACC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAFF,EAIE;AAAM,MAAA,QAAQ,EAAE,KAAKW,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,oBAAC,SAAD;AACC,MAAA,KAAK,EAAC,OADP;AAEC,MAAA,IAAI,EAAC,OAFN;AAGC,MAAA,IAAI,EAAC,OAHN;AAIC,MAAA,KAAK,EAAE,KAAKG,KAAL,CAAWC,KAJnB;AAKC,MAAA,QAAQ,EAAE,KAAKV,cALhB;AAMC,MAAA,QAAQ,MANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,EAWC,oBAAC,SAAD;AACC,MAAA,KAAK,EAAC,UADP;AAEC,MAAA,IAAI,EAAC,UAFN;AAGC,MAAA,IAAI,EAAC,UAHN;AAIC,MAAA,KAAK,EAAE,KAAKS,KAAL,CAAWE,QAJnB;AAKC,MAAA,QAAQ,EAAE,KAAKX,cALhB;AAMC,MAAA,QAAQ,MANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXD,EAmBC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,EAEC,oBAAC,YAAD;AACC,MAAA,IAAI,EAAC,QADN;AAEC,MAAA,OAAO,EAAEL,iBAFV;AAGC,MAAA,cAAc,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFD,CAnBD,CAJF,CADD;AAmCA;;AAnEkC;;AAsEpC,MAAMkB,kBAAkB,GAAGC,QAAQ,KAAK;AACvCnB,EAAAA,iBAAiB,EAAE,MAAMmB,QAAQ,CAACnB,iBAAiB,EAAlB,CADM;AAEvCC,EAAAA,gBAAgB,EAAE,CAACc,KAAD,EAAQC,QAAR,KAAqBG,QAAQ,CAAClB,gBAAgB,CAAC;AAACc,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,CAAjB;AAFR,CAAL,CAAnC;;AAKA,eAAenB,OAAO,CAAC,IAAD,EAAOqB,kBAAP,CAAP,CAAkChB,MAAlC,CAAf","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\nimport './sign-in.styles.scss'\n\nimport FormInput from '../form-input/form-input.component.jsx'\nimport CustomButton from '../custom-button/custom-button.component.jsx'\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions'\n\nclass SignIn extends React.Component{\n\n\tconstructor(){\n\t\tsuper()\n\n\t\tthis.state = {\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t}\n\t}\n\n\tonChangeHandle = (e)=>{\n\t\tconst {name, value} = e.target\n\n\t\tthis.setState({\n\t\t\t[name] : value\n\t\t})\n\t}\n\n\thandleSubmit = async (e)=>{\n\t\te.preventDefault()\n\n\t\tconst {emailSignInStart} = this.props\n\t\tconst {email, password} = this.state\n\n\t\temailSignInStart(email, password)\n\t}\n\n\trender(){\n\n\t\tconst { googleSignInStart } = this.props\n\n\t\treturn(\n\t\t\t<div className=\"sign-in\">\n\t\t\t\t\t<h2>I already have an account</h2>\n\t\t\t\t\t<span>Sign in with your email and password</span>\n\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\n\n\t\t\t\t\t\t<FormInput\n\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\tvalue={this.state.email}\n\t\t\t\t\t\t\tonChange={this.onChangeHandle}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<FormInput\n\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tvalue={this.state.password}\n\t\t\t\t\t\t\tonChange={this.onChangeHandle}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className=\"buttons\">\n\t\t\t\t\t\t\t<CustomButton type=\"submit\"> Submit </CustomButton>\n\t\t\t\t\t\t\t<CustomButton \n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tonClick={googleSignInStart}\n\t\t\t\t\t\t\t\tisGoogleSignIn \n\t\t\t\t\t\t\t>Sign in with Google</CustomButton>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tgoogleSignInStart: () => dispatch(googleSignInStart()),\n\temailSignInStart: (email, password) => dispatch(emailSignInStart({email, password})),\n})\n\nexport default connect(null, mapDispatchToProps)(SignIn)\n"]},"metadata":{},"sourceType":"module"}